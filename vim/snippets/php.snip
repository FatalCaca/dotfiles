snippet     php
    <?php
    ${0}
    ?>

snippet     pf
options     indent
    public function ${1:functionName}(${2})
    {
        ${0}
    }

snippet     psf
options     indent
    public static function ${1:functionName}(${2})
    {
        ${0}
    }

snippet     ctor
options     indent
    public function __construct(${1})
    {
        ${0}
    }

snippet     ps
options     indent
    public static $${0};

snippet     pu
options     indent
    public $${0};

snippet     pr
options     indent
    private $${0};

snippet     gs
options     indent
    public function get${1}()
    {
        return $this->$1;
    }

    public function set$1($$1)
    {
        $this->$1 = $$1;
        return $this;
    }
    ${0}

snippet     for
options     indent
    for ($i = ${1:0}; $i < ${2:max}; $i++)
    {
        ${0}
    }

snippet     fore
options     indent
    foreach ($${1} as $${2}) {
        ${0}
    }

snippet     if
options     indent
    if (${1}) {
        ${0}
    }

snippet     route
options     indent
    /**
     * @Route("${0:route/to/match}")
     * @Method({"GET"})
    */

snippet     droute
options     indent
    /**
     * @Route("${1:route/to/match}", defaults={${2:defaults}})
     * @Method({"GET"})
    */

snippet     nroute
options     indent
    /**
     * @Route("${1:route/to/match}", name="${2:name}")
     * @Method({"GET"})
    */
    ${0}

snippet     nnroute
options     indent
    /**
     * @Route("${1:route/to/match}", name="${2:name}")
     * @Method({"${3}"})
    */
    ${0}

snippet     eroute
options     indent
    /**
     * @Route("${1:route/to/match}",
     *        options = { "expose": true },
     *        name="${2:name}")
     * @Method({"GET"})
    */

snippet     class
    class ${1:className}
    {
        ${0}
    }

snippet     classe
    class ${1:className} extends ${2:parentClass}
    {
        ${0}
    }

snippet      repository
    <?php
    namespace AppBundle\Repository;

    use Doctrine\ORM\EntityRepository;
    use Doctrine\Common\Collections\ArrayCollection;

    class ${1}Repository extends EntityRepository
    {
        ${0}
    }
    ?>

snippet     controller
    <?php
    namespace AppBundle\Controller${1};

    use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
    use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
    use Symfony\Bundle\FrameworkBundle\Controller\Controller;
    use Symfony\Component\HttpFoundation\Request;
    use Symfony\Component\HttpFoundation\Response;


    class ${2} extends Controller
    {
        ${0}
    }
    ?>

snippet     restcontroller
    <?php
    namespace AppBundle\API\Controller;

    use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
    use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
 use JMS\Serializer\Annotation\Expose;   use FOS\RestBundle\Controller\FOSRestController;
    use FOS\RestBundle\Controller\Annotations\RouteResource;
    use Symfony\Component\HttpFoundation\Request;
    use Symfony\Component\HttpFoundation\Response;


    /**
     * Class ${1:MyController}
     * @package ${2:AppBundle\Controller\Admin}
     */
    class $1 extends FOSRestController
    {
        ${0}
    }
    ?>

snippet     form
    <?php
    namespace AppBundle\Form;

    use Symfony\Component\Form\AbstractType;
    use Symfony\Component\Form\FormBuilderInterface;
    use Symfony\Component\Form\Extension\Core\Type\SubmitType;
    use Symfony\Component\OptionsResolver\OptionsResolver;

    class ${1}Type extends AbstractType
    {
        public function buildForm(FormBuilderInterface $builder, array $options)
        {
            $builder
                ->add('${0}')
                ->add('save', SubmitType::class)
            ;
        }

        public function configureOptions(OptionsResolver $resolver)
        {
            $resolver->setDefaults([ 'data_class' => 'AppBundle\Entity\\'.'$1']);
        }
    }
    ?>

snippet     command
    <?php
    namespace AppBundle\Command;

    use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
    use Symfony\Component\Console\Input\InputInterface;
    use Symfony\Component\Console\Output\OutputInterface;

    class ${1:MyCommand} extends ContainerAwareCommand
    {
        protected function configure()
        {
            $this
                ->setName('${1}')
                ->setDescription('${2}')
                ->setHelp('${3}')
                ;
        }

        protected function execute(InputInterface $input, OutputInterface $output)
        {
            $em = $this->getContainer()->get('doctrine')->getManager();
            ${0}
        }
    }


snippet     entity
options     indent
    <?php

    namespace AppBundle\Entity;

    use Doctrine\ORM\Mapping as ORM;
    use Symfony\Component\Validator\Constraints as Assert;


    /**
     * @ORM\Entity
     * @ORM\Table(name="${1:tableName}")
     */
    class ${2:className}
    {
        ${0}
    }

snippet     column
options     indent
    /**
     * @ORM\Column(type="${1:columnType}")
     */
    private $${2:attributeName};
    ${0}

snippet     ncol
options     indent
    /**
     * @ORM\Column(type="${1:columnType}", name="${2:columnName}")
     */
    private $${3:attributeName};
    ${0}

snippet     scolumn
options     indent
    /**
     * @ORM\Column(type="string", length=${1})
     */
    private $${2:attributeName};
    ${0}

snippet     pk
options     indent
    /**
     * @ORM\Column(type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;
    ${0}

snippet     mto
options     indent
    /**
     * @ORM\ManyToOne(targetEntity="${1}", inversedBy="${2}", cascade={"persist"})
     * @ORM\JoinColumn(name="${3}", referencedColumnName="${4}")
     */
     private $${5};
    ${0}

snippet     otm
options     indent
    /**
     * @ORM\OneToMany(targetEntity="${1}", mappedBy="${2}", cascade={"persist"})
     */
    private $${3};
    $this->$3 = new ArrayCollection();
    ${0}

snippet     oto
    /**
     * @ORM\OneToOne(targetEntity="${1}", mappedBy="${2}")
     */
    private $${0};

snippet     otoo
    /**
     * @ORM\OneToOne(targetEntity="${1}", inversedBy="${2}")
     * @ORM\JoinColumn(name="${3}", referencedColumnName="id")
     */
    private $${0};

snippet     mtm
    /**
     * @ORM\ManyToMany(targetEntity="${1}", inversedBy="${2}")
     * @ORM\JoinTable(name="${3}")
     */
    private $${4};

    $this->$4 = new ArrayCollection();${0}

snippet     mtmm
    /**
     * @ORM\ManyToMany(targetEntity="${1}", mappedBy="${2}")
     */
    private $${3};

    $this->$3 = new ArrayCollection();${0}

snippet     join
     /**
     * @OneToOne(targetEntity="${1}", inversedBy="${2}")
     * @JoinColumn(name="${3}", referencedColumnName="${4}")
     */
    private $${5};
    ${0}




snippet     udoctrine
    use Doctrine\ORM\Mapping as ORM;
    ${0}

snippet     upaginator
    use Doctrine\ORM\Tools\Pagination\Paginator;
    ${0}

snippet     uresponse
    use Symfony\Component\HttpFoundation\Response;
    ${0}

snippet     uroute
    use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
    ${0}

snippet     ucontroller
    use Symfony\Bundle\FrameworkBundle\Controller\Controller;
    ${0}

snippet     urequest
    use Symfony\Component\HttpFoundation\Request;
    ${0}

snippet     uform
    use Symfony\Component\Form\Extension\Core\Type\TextType;
    use Symfony\Component\Form\Extension\Core\Type\DateType;
    use Symfony\Component\Form\Extension\Core\Type\SubmitType;
    ${0}

snippet     uarray
    use Doctrine\Common\Collections\ArrayCollection;
    ${0}

snippet     unotification
    use Avanzu\AdminThemeBundle\Model\NotificationInterface as ThemeNotification;

snippet     uuser
    use Symfony\Component\Security\Core\User\UserInterface;

snippet     ns
options     indent
    namespace ${0};

snippet     flash
options     indent
        $this->get('session')->getFlashBag()->add(
            '${1}',
            '${2}'
        );

snippet     log
options     indent
    $this->get('logger')->info('${0}');

snippet     vd
options     indent
    var_dump(${0});

snippet     em
options     indent
    $em = $this->getDoctrine()->getManager();

snippet     repo
options     indent
    $repo${1} = $em->getRepository("AppBundle:$1");

snippet     rrepo
options     indent
    $em = $this->getDoctrine()->getManager();
    $repo${1} = $em->getRepository("AppBundle:$1");

snippet     **
options     indent
    /**
    * ${0}
    **/

snippet     404
options     indent
    throw new \Symfony\Component\HttpKernel\Exception\NotFoundHttpException("${0}");

snippet     200
options     indent
    $this->assertSame(200, $this->client->getResponse()->getStatusCode());

snippet     403
options     indent
    throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException('${0}');

snippet     exc
options     indent
    throw new \Exception('${0}');

snippet     testcase
options     indent
    <?php
    namespace Tests\AppBundle\Controller;

    use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;


    class ${1} extends WebTestCase
    {
        ${0}
    }
    ?>

snippet     crawler
options      indent
    $client = static::createClient();
    $crawler = $client->request('GET', '${1}');

snippet     basepage
options     indent
    <?php
    class BasePage
    {
        public $client;
        public $crawler;

        public function __construct($client, $crawler)
        {
            $this->$client = $client;
            $this->$crawler = $crawler;
        }
    }
    ?>

snippet     page
options     indent
    <?php
    use AppBundle\Tests\Controller\BasePage;


    class LoginPage extends BasePage
    {
        ${0}
    }
    ?>

snippet     dp
options     indent
    /**
     * @dataProvider ${0}
     */

snippet     iterator
options     indent
    class ${1} implements Iterator
    {
        private $${2};
        private $position;

        public function __construct($$2)
        {
            $this->rows = $$2;
        }

        public function rewind()
        {
            $this->position = 0;
        }

        public function current()
        {
            return $this->$2[$this->position];
        }

        public function key()
        {
            return $this->position;
        }

        public function next()
        {
            $this->position++;
        }

        public function valid()
        {
            return isset($this->$2[$this->position]);
        }
    }

snippet     critical
options     indent
    $this->get('logger')->critical(${0});

snippet     service
options     indent
    <?php

    namespace AppBundle\Manager;

    use Doctrine\Common\Persistence\ObjectManager;
    use AppBundle\Manager\BaseManager;
    use FOS\UserBundle\Model\UserInterface;
    use FOS\UserBundle\Util\CanonicalFieldsUpdater;
    use FOS\UserBundle\Util\PasswordUpdaterInterface;
    use AppBundle\Services\Mailer;

    class ${1}
    {
        const SERVICE_NAME = 'app.${2}';

        public function __construct(EntityManagerInterface $entityManager)
        {
            $this->entityManager = $entityManager;
        }
    }

snippet     constant
options     indent
    <?php
    namespace AppBundle\Entity\Constants;


    class ${1}
    {
        const ${0}
    }
    ?>
